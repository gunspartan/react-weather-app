{"version":3,"sources":["img/sunny.png","img/rainy.png","img/cloudy.png","img/snowy.png","forecast.js","components/Day.js","components/Weather.js","components/Temp.js","components/Card.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","forecast","day","weather","tempHigh","tempLow","Day","props","react_default","a","createElement","className","Weather","src","alt","Temp","Card","components_Day","components_Weather","weatherURL","components_Temp","App","sunny","rainy","cloudy","snowy","components_Card","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce31d901.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sunny.9b5585b9.png\";","module.exports = __webpack_public_path__ + \"static/media/rainy.c920f935.png\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.5dcd9836.png\";","module.exports = __webpack_public_path__ + \"static/media/snowy.f56b9a8d.png\";","const forecast = [\r\n    {\r\n        day: 'Monday',\r\n        weather: 'sunny',\r\n        tempHigh: 78,\r\n        tempLow: 67,\r\n    },\r\n    {\r\n        day: 'Tuesday',\r\n        weather: 'sunny',\r\n        tempHigh: 83,\r\n        tempLow: 66,\r\n    },\r\n    {\r\n        day: 'Wednesday',\r\n        weather: 'rainy',\r\n        tempHigh: 77,\r\n        tempLow: 65,\r\n    },\r\n    {\r\n        day: 'Thursday',\r\n        weather: 'sunny',\r\n        tempHigh: 78,\r\n        tempLow: 64,\r\n    },\r\n    {\r\n        day: 'Friday',\r\n        weather: 'sunny',\r\n        tempHigh: 78,\r\n        tempLow: 64,\r\n    }\r\n]\r\n\r\nexport default forecast;","import React from 'react';\r\n\r\nconst Day = props => (\r\n    <div className='day'>\r\n        <h3 className='day_name'>{ props.day }</h3>\r\n    </div>\r\n);\r\n\r\nexport default Day;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n    <img src={props.weather} alt='weather icon' className='weather_icon' />\r\n);\r\n\r\nexport default Weather;","import React from 'react';\r\n\r\nconst Temp = props => (\r\n    <section className='temp'>\r\n        <div className='temp-high'>\r\n            <h5>{ props.tempHigh }{'\\u2109'}</h5>\r\n        </div>\r\n        <div className='temp-low'>\r\n            <h5>{ props.tempLow }{'\\u2109'}</h5>\r\n        </div>\r\n    </section>\r\n);\r\n\r\nexport default Temp;","import React from 'react';\r\nimport Day from './Day';\r\nimport Weather from './Weather';\r\nimport Temp from './Temp';\r\n\r\nconst Card = props => (\r\n    <div className='card'>\r\n        <section className='main'>\r\n            <Day day={props.day} />\r\n            <Weather weather={props.weatherURL} />\r\n            <Temp\r\n                tempHigh={props.tempHigh}\r\n                tempLow={props.tempLow}\r\n            />\r\n        </section>\r\n    </div>\r\n)\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport '../styles/App.css';\nimport forecast from '../forecast';\nimport Card from './Card';\nimport sunny from '../img/sunny.png'\nimport rainy from '../img/rainy.png'\nimport cloudy from '../img/cloudy.png'\nimport snowy from '../img/snowy.png'\n\n\nexport default class App extends Component {\n\n  weather(day) {\n    if (day === 'sunny') {\n      return sunny\n    } else if (day === 'rainy') {\n      return rainy\n    } else if (day === 'cloudy') {\n      return cloudy\n    } else if (day === 'snowy') {\n      return snowy\n    }\n  }\n\n  renderCard(forecast) {\n    return (\n      <Card\n        day={forecast.day}\n        weatherURL={this.weather(forecast.weather)}\n        tempHigh={forecast.tempHigh}\n        tempLow={forecast.tempLow}\n      />\n    )\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <div className='monday'>\n          <Card\n            day={forecast[0].day}\n            weatherURL= {this.weather(forecast[0].weather)}\n            tempHigh={forecast[0].tempHigh}\n            tempLow={forecast[0].tempLow}\n          />\n        </div>\n        <div className='tuesday'>\n          <Card\n            day={forecast[1].day}\n            weatherURL={this.weather(forecast[1].weather)}\n            tempHigh={forecast[1].tempHigh}\n            tempLow={forecast[1].tempLow}\n          />\n        </div>\n        <div className='wednesday'>\n          <Card\n            day={forecast[2].day}\n            weatherURL={this.weather(forecast[2].weather)}\n            tempHigh={forecast[2].tempHigh}\n            tempLow={forecast[2].tempLow}\n          />\n        </div>\n        <div className='thursday'>\n          <Card\n            day={forecast[3].day}\n            weatherURL={this.weather(forecast[3].weather)}\n            tempHigh={forecast[3].tempHigh}\n            tempLow={forecast[3].tempLow}\n          />\n        </div>\n        <div className='friday'>\n          <Card\n            day={forecast[4].day}\n            weatherURL={this.weather(forecast[4].weather)}\n            tempHigh={forecast[4].tempHigh}\n            tempLow={forecast[4].tempLow}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}